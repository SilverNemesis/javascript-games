{"version":3,"sources":["games/noise.js","App.js","serviceWorker.js","index.js"],"names":["state","render","ctx","width","height","image","createImageData","size","buffer","data","y","x","color","Math","floor","random","dy","min","dx","pos","putImageData","handleKeyDown","event","keyCode","games","name","gameIndex","props","totalFrameTime","frameCount","deltaTime","handleClick","preventDefault","length","handleKeyUp","App","canvasRef","React","useRef","requestRef","previousTimeRef","useEffect","canvas","current","rect","getBoundingClientRect","getContext","window","devicePixelRatio","addEventListener","requestAnimationFrame","animate","currentTime","undefined","t0","performance","now","update","t1","text","toFixed","fillStyle","font","textAlign","textBaseline","shadowOffsetX","shadowOffsetY","shadowColor","shadowBlur","fillText","drawFrameTime","removeEventListener","cancelAnimationFrame","className","ref","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NAAIA,G,KAAQ,IAgBZ,SAASC,EAAT,GAAyC,IAAvBC,EAAsB,EAAtBA,IAAKC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OACxBD,IAAUH,EAAMG,OAASC,IAAWJ,EAAMI,SAC5CJ,EAAMG,MAAQA,EACdH,EAAMI,OAASA,EACfJ,EAAMK,MAAQH,EAAII,gBAAgBH,EAAOC,IAM3C,IAVsC,IAO9BG,EAASP,EAATO,KACFC,EAASR,EAAMK,MAAMI,KAElBC,EAAI,EAAGA,EAAIN,EAAQM,GAAKH,EAC/B,IAAK,IAAII,EAAI,EAAGA,EAAIR,EAAOQ,GAAKJ,EAE9B,IADA,IAAMK,EAAQC,KAAKC,MAAsB,IAAhBD,KAAKE,UACrBC,EAAKN,EAAGM,EAAKH,KAAKI,IAAIP,EAAIH,EAAMH,GAASY,IAChD,IAAK,IAAIE,EAAKP,EAAGO,EAAKL,KAAKI,IAAIN,EAAIJ,EAAMJ,GAAQe,IAAM,CACrD,IAAMC,EAA0B,GAAnBH,EAAKb,EAAQe,GAC1BV,EAAOW,GAAOP,EACdJ,EAAOW,EAAM,GAAKP,EAClBJ,EAAOW,EAAM,GAAKP,EAClBJ,EAAOW,EAAM,GAAK,IAM1BjB,EAAIkB,aAAapB,EAAMK,MAAO,EAAG,GAGnC,SAASgB,EAAcC,GACC,KAAlBA,EAAMC,QACJvB,EAAMO,KAAO,GACfP,EAAMO,OAGc,KAAlBe,EAAMC,SACJvB,EAAMO,KAAO,KACfP,EAAMO,OCjDd,IAAMiB,EAAQ,CDDC,YAA6C,IAAvBtB,EAAsB,EAAtBA,IAAKC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OAO/C,OANAJ,EAAQ,CACNO,KAAM,EACNJ,QACAC,SACAC,MAAOH,EAAII,gBAAgBH,EAAOC,IAE7B,CACLqB,KAAM,QACNxB,SACAoB,mBCPAK,EAAY,EAEZ1B,EAAQ,GAEN2B,EAAQ,CACZC,eAAgB,EAChBC,WAAY,EACZ3B,IAAK,KACL4B,UAAW,EACX3B,MAAO,EACPC,OAAQ,EACRC,MAAO,MAyET,SAAS0B,EAAYT,GACftB,EAAM+B,aACR/B,EAAM+B,YAAYT,GAItB,SAASD,EAAcC,GACC,IAAlBA,EAAMC,SACRD,EAAMU,iBACNN,GAAaA,EAAY,GAAKF,EAAMS,OACpCjC,EAAQwB,EAAME,GAAWC,GACzBA,EAAMC,eAAiB,EACvBD,EAAME,WAAa,GAGf7B,EAAMqB,eACRrB,EAAMqB,cAAcC,GAK1B,SAASY,EAAYZ,GACftB,EAAMkC,aACRlC,EAAMkC,YAAYZ,GAiBPa,MA9Gf,WACE,IAAMC,EAAYC,IAAMC,OAAO,MACzBC,EAAaF,IAAMC,OAAO,MAC1BE,EAAkBH,IAAMC,OAAO,GA4DrC,OA1DAD,IAAMI,WAAU,WACd,IAAMC,EAASN,EAAUO,QACnBC,EAAOF,EAAOG,wBACpBlB,EAAMzB,IAAMwC,EAAOI,WAAW,MAC9BnB,EAAMxB,MAAQyC,EAAKzC,MAAQ4C,OAAOC,iBAClCrB,EAAMvB,OAASwC,EAAKxC,OAAS2C,OAAOC,iBAEpChD,EAAQwB,EAAME,GAAWC,GA2CzB,OALAoB,OAAOE,iBAAiB,QAASlB,GACjCgB,OAAOE,iBAAiB,UAAW5B,GACnC0B,OAAOE,iBAAiB,QAASf,GAEjCK,EAAWI,QAAUO,uBAxCL,SAAVC,EAAUC,GACd,QAAgCC,IAA5Bb,EAAgBG,QAAuB,CACzChB,EAAMG,UAAYsB,EAAcZ,EAAgBG,QAEhD,IAAMC,EAAOF,EAAOG,wBACpBH,EAAOvC,MAAQyC,EAAKzC,MAAQ4C,OAAOC,iBACnCN,EAAOtC,OAASwC,EAAKxC,OAAS2C,OAAOC,iBAEjCN,EAAOvC,QAAUwB,EAAMxB,OAASuC,EAAOtC,SAAWuB,EAAMvB,SAC1DuB,EAAMC,eAAiB,EACvBD,EAAME,WAAa,EACnBF,EAAMxB,MAAQuC,EAAOvC,MACrBwB,EAAMvB,OAASsC,EAAOtC,QAGxB,IAAMkD,EAAKC,YAAYC,MAEnBxD,EAAMyD,QACRzD,EAAMyD,OAAO9B,GAGX3B,EAAMC,QACRD,EAAMC,OAAO0B,GAGf,IAAM+B,EAAKH,YAAYC,MACvB7B,EAAMC,gBAAkB8B,EAAKJ,EAC7B3B,EAAME,aAwDd,YAAoE,IAA3C3B,EAA0C,EAA1CA,IAAKC,EAAqC,EAArCA,MAAOyB,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WAC7C8B,EAAO3D,EAAMyB,KAAO,MAAQG,EAAiBC,GAAY+B,QAAQ,GAAK,OAC5E1D,EAAI2D,UAAY,QAChB3D,EAAI4D,KAAO,iBACX5D,EAAI6D,UAAY,SAChB7D,EAAI8D,aAAe,MACnB9D,EAAI+D,cAAgB,EACpB/D,EAAIgE,cAAgB,EACpBhE,EAAIiE,YAAc,wBAClBjE,EAAIkE,WAAa,EACjBlE,EAAImE,SAASV,EAAMxD,EAAQ,EAAG,GAhExBmE,CAAc3C,GAGhBa,EAAgBG,QAAUS,EAC1Bb,EAAWI,QAAUO,sBAAsBC,MAQtC,WACLJ,OAAOwB,oBAAoB,QAASxC,GACpCgB,OAAOwB,oBAAoB,UAAWlD,GACtC0B,OAAOwB,oBAAoB,QAASrC,GACpCsC,qBAAqBjC,EAAWI,YAEjC,CAACP,IAGF,yBAAKqC,UAAU,UACb,4BAAQA,UAAU,SAASC,IAAKtC,MCxElBuC,QACW,cAA7B5B,OAAO6B,SAASC,UAEa,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZJC,IAAS9E,OACP,kBAAC,IAAM+E,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.43a4e858.chunk.js","sourcesContent":["let state = {}\r\n\r\nexport default function initialize({ ctx, width, height }) {\r\n  state = {\r\n    size: 1,\r\n    width,\r\n    height,\r\n    image: ctx.createImageData(width, height)\r\n  }\r\n  return {\r\n    name: 'noise',\r\n    render,\r\n    handleKeyDown\r\n  }\r\n}\r\n\r\nfunction render({ ctx, width, height }) {\r\n  if (width !== state.width || height !== state.height) {\r\n    state.width = width;\r\n    state.height = height;\r\n    state.image = ctx.createImageData(width, height);\r\n  }\r\n\r\n  const { size } = state;\r\n  const buffer = state.image.data;\r\n\r\n  for (let y = 0; y < height; y += size) {\r\n    for (let x = 0; x < width; x += size) {\r\n      const color = Math.floor(Math.random() * 256);\r\n      for (let dy = y; dy < Math.min(y + size, height); dy++) {\r\n        for (let dx = x; dx < Math.min(x + size, width); dx++) {\r\n          const pos = (dy * width + dx) * 4;\r\n          buffer[pos] = color;\r\n          buffer[pos + 1] = color;\r\n          buffer[pos + 2] = color;\r\n          buffer[pos + 3] = 255;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ctx.putImageData(state.image, 0, 0);\r\n}\r\n\r\nfunction handleKeyDown(event) {\r\n  if (event.keyCode === 40) {\r\n    if (state.size > 1) {\r\n      state.size--;\r\n    }\r\n  } else\r\n    if (event.keyCode === 38) {\r\n      if (state.size < 100) {\r\n        state.size++;\r\n      }\r\n    }\r\n}","import React from 'react';\r\nimport noise from './games/noise';\r\n\r\nconst games = [noise];\r\n\r\nlet gameIndex = 0;\r\n\r\nlet state = {};\r\n\r\nconst props = {\r\n  totalFrameTime: 0,\r\n  frameCount: 0,\r\n  ctx: null,\r\n  deltaTime: 0,\r\n  width: 0,\r\n  height: 0,\r\n  image: null\r\n};\r\n\r\nfunction App() {\r\n  const canvasRef = React.useRef(null);\r\n  const requestRef = React.useRef(null);\r\n  const previousTimeRef = React.useRef(0);\r\n\r\n  React.useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const rect = canvas.getBoundingClientRect()\r\n    props.ctx = canvas.getContext('2d');\r\n    props.width = rect.width * window.devicePixelRatio;\r\n    props.height = rect.height * window.devicePixelRatio;\r\n\r\n    state = games[gameIndex](props);\r\n\r\n    const animate = currentTime => {\r\n      if (previousTimeRef.current !== undefined) {\r\n        props.deltaTime = currentTime - previousTimeRef.current;\r\n\r\n        const rect = canvas.getBoundingClientRect()\r\n        canvas.width = rect.width * window.devicePixelRatio;\r\n        canvas.height = rect.height * window.devicePixelRatio;\r\n\r\n        if (canvas.width !== props.width || canvas.height !== props.height) {\r\n          props.totalFrameTime = 0;\r\n          props.frameCount = 0;\r\n          props.width = canvas.width;\r\n          props.height = canvas.height;\r\n        }\r\n\r\n        const t0 = performance.now();\r\n\r\n        if (state.update) {\r\n          state.update(props);\r\n        }\r\n\r\n        if (state.render) {\r\n          state.render(props);\r\n        }\r\n\r\n        const t1 = performance.now();\r\n        props.totalFrameTime += t1 - t0;\r\n        props.frameCount++;\r\n\r\n        drawFrameTime(props);\r\n      }\r\n\r\n      previousTimeRef.current = currentTime;\r\n      requestRef.current = requestAnimationFrame(animate);\r\n    }\r\n\r\n    window.addEventListener('click', handleClick);\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    window.addEventListener('keyup', handleKeyUp);\r\n\r\n    requestRef.current = requestAnimationFrame(animate);\r\n    return () => {\r\n      window.removeEventListener('click', handleClick);\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n      window.removeEventListener('keyup', handleKeyUp);\r\n      cancelAnimationFrame(requestRef.current);\r\n    }\r\n  }, [canvasRef]);\r\n\r\n  return (\r\n    <div className=\"screen\">\r\n      <canvas className=\"canvas\" ref={canvasRef}></canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction handleClick(event) {\r\n  if (state.handleClick) {\r\n    state.handleClick(event);\r\n  }\r\n}\r\n\r\nfunction handleKeyDown(event) {\r\n  if (event.keyCode === 9) {\r\n    event.preventDefault();\r\n    gameIndex = (gameIndex + 1) % games.length;\r\n    state = games[gameIndex](props);\r\n    props.totalFrameTime = 0;\r\n    props.frameCount = 0;\r\n  }\r\n  else {\r\n    if (state.handleKeyDown) {\r\n      state.handleKeyDown(event);\r\n    }\r\n  }\r\n}\r\n\r\nfunction handleKeyUp(event) {\r\n  if (state.handleKeyUp) {\r\n    state.handleKeyUp(event);\r\n  }\r\n}\r\n\r\nfunction drawFrameTime({ ctx, width, totalFrameTime, frameCount }) {\r\n  const text = state.name + ' (' + (totalFrameTime / frameCount).toFixed(2) + ' ms)';\r\n  ctx.fillStyle = 'white';\r\n  ctx.font = '20px monospace';\r\n  ctx.textAlign = 'center';\r\n  ctx.textBaseline = 'top';\r\n  ctx.shadowOffsetX = 1;\r\n  ctx.shadowOffsetY = 1;\r\n  ctx.shadowColor = 'rgba(0.2,0.2,0.2,1.0)';\r\n  ctx.shadowBlur = 4;\r\n  ctx.fillText(text, width / 2, 0);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}